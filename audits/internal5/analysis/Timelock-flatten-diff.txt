3c3

135,523c136,137
< // The following code is from flattening this file: /home/andrey/valory/autonolas-governance/node_modules/@openzeppelin/contracts/utils/Strings.sol
< // OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)
< 
< 
< // The following code is from flattening this import statement in: /home/andrey/valory/autonolas-governance/node_modules/@openzeppelin/contracts/utils/Strings.sol
< // import "./math/Math.sol";
< // The following code is from flattening this file: /home/andrey/valory/autonolas-governance/node_modules/@openzeppelin/contracts/utils/math/Math.sol
< // OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)
< 
< 
< /**
<  * @dev Standard math utilities missing in the Solidity language.
<  */
< library Math {
<     enum Rounding {
<         Down, // Toward negative infinity
<         Up, // Toward infinity
<         Zero // Toward zero
<     }
< 
<     /**
<      * @dev Returns the largest of two numbers.
<      */
<     function max(uint256 a, uint256 b) internal pure returns (uint256) {
<         return a > b ? a : b;
<     }
< 
<     /**
<      * @dev Returns the smallest of two numbers.
<      */
<     function min(uint256 a, uint256 b) internal pure returns (uint256) {
<         return a < b ? a : b;
<     }
< 
<     /**
<      * @dev Returns the average of two numbers. The result is rounded towards
<      * zero.
<      */
<     function average(uint256 a, uint256 b) internal pure returns (uint256) {
<         // (a + b) / 2 can overflow.
<         return (a & b) + (a ^ b) / 2;
<     }
< 
<     /**
<      * @dev Returns the ceiling of the division of two numbers.
<      *
<      * This differs from standard division with `/` in that it rounds up instead
<      * of rounding down.
<      */
<     function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {
<         // (a + b - 1) / b can overflow on addition, so we distribute.
<         return a == 0 ? 0 : (a - 1) / b + 1;
<     }
< 
<     /**
<      * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0
<      * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)
<      * with further edits by Uniswap Labs also under MIT license.
<      */
<     function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {
<         unchecked {
<             // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use
<             // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256
<             // variables such that product = prod1 * 2^256 + prod0.
<             uint256 prod0; // Least significant 256 bits of the product
<             uint256 prod1; // Most significant 256 bits of the product
<             assembly {
<                 let mm := mulmod(x, y, not(0))
<                 prod0 := mul(x, y)
<                 prod1 := sub(sub(mm, prod0), lt(mm, prod0))
<             }
< 
<             // Handle non-overflow cases, 256 by 256 division.
<             if (prod1 == 0) {
<                 // Solidity will revert if denominator == 0, unlike the div opcode on its own.
<                 // The surrounding unchecked block does not change this fact.
<                 // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.
<                 return prod0 / denominator;
<             }
< 
<             // Make sure the result is less than 2^256. Also prevents denominator == 0.
<             require(denominator > prod1, "Math: mulDiv overflow");
< 
<             ///////////////////////////////////////////////
<             // 512 by 256 division.
<             ///////////////////////////////////////////////
< 
<             // Make division exact by subtracting the remainder from [prod1 prod0].
<             uint256 remainder;
<             assembly {
<                 // Compute remainder using mulmod.
<                 remainder := mulmod(x, y, denominator)
< 
<                 // Subtract 256 bit number from 512 bit number.
<                 prod1 := sub(prod1, gt(remainder, prod0))
<                 prod0 := sub(prod0, remainder)
<             }
< 
<             // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.
<             // See https://cs.stackexchange.com/q/138556/92363.
< 
<             // Does not overflow because the denominator cannot be zero at this stage in the function.
<             uint256 twos = denominator & (~denominator + 1);
<             assembly {
<                 // Divide denominator by twos.
<                 denominator := div(denominator, twos)
< 
<                 // Divide [prod1 prod0] by twos.
<                 prod0 := div(prod0, twos)
< 
<                 // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.
<                 twos := add(div(sub(0, twos), twos), 1)
<             }
< 
<             // Shift in bits from prod1 into prod0.
<             prod0 |= prod1 * twos;
< 
<             // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such
<             // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for
<             // four bits. That is, denominator * inv = 1 mod 2^4.
<             uint256 inverse = (3 * denominator) ^ 2;
< 
<             // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works
<             // in modular arithmetic, doubling the correct bits in each step.
<             inverse *= 2 - denominator * inverse; // inverse mod 2^8
<             inverse *= 2 - denominator * inverse; // inverse mod 2^16
<             inverse *= 2 - denominator * inverse; // inverse mod 2^32
<             inverse *= 2 - denominator * inverse; // inverse mod 2^64
<             inverse *= 2 - denominator * inverse; // inverse mod 2^128
<             inverse *= 2 - denominator * inverse; // inverse mod 2^256
< 
<             // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.
<             // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is
<             // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1
<             // is no longer required.
<             result = prod0 * inverse;
<             return result;
<         }
<     }
< 
<     /**
<      * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.
<      */
<     function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {
<         uint256 result = mulDiv(x, y, denominator);
<         if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {
<             result += 1;
<         }
<         return result;
<     }
< 
<     /**
<      * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.
<      *
<      * Inspired by Henry S. Warren, Jr.'s "Hacker's Delight" (Chapter 11).
<      */
<     function sqrt(uint256 a) internal pure returns (uint256) {
<         if (a == 0) {
<             return 0;
<         }
< 
<         // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.
<         //
<         // We know that the "msb" (most significant bit) of our target number `a` is a power of 2 such that we have
<         // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.
<         //
<         // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`
<         // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`
<         // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`
<         //
<         // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.
<         uint256 result = 1 << (log2(a) >> 1);
< 
<         // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,
<         // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at
<         // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision
<         // into the expected uint128 result.
<         unchecked {
<             result = (result + a / result) >> 1;
<             result = (result + a / result) >> 1;
<             result = (result + a / result) >> 1;
<             result = (result + a / result) >> 1;
<             result = (result + a / result) >> 1;
<             result = (result + a / result) >> 1;
<             result = (result + a / result) >> 1;
<             return min(result, a / result);
<         }
<     }
< 
<     /**
<      * @notice Calculates sqrt(a), following the selected rounding direction.
<      */
<     function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {
<         unchecked {
<             uint256 result = sqrt(a);
<             return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);
<         }
<     }
< 
<     /**
<      * @dev Return the log in base 2, rounded down, of a positive value.
<      * Returns 0 if given 0.
<      */
<     function log2(uint256 value) internal pure returns (uint256) {
<         uint256 result = 0;
<         unchecked {
<             if (value >> 128 > 0) {
<                 value >>= 128;
<                 result += 128;
<             }
<             if (value >> 64 > 0) {
<                 value >>= 64;
<                 result += 64;
<             }
<             if (value >> 32 > 0) {
<                 value >>= 32;
<                 result += 32;
<             }
<             if (value >> 16 > 0) {
<                 value >>= 16;
<                 result += 16;
<             }
<             if (value >> 8 > 0) {
<                 value >>= 8;
<                 result += 8;
<             }
<             if (value >> 4 > 0) {
<                 value >>= 4;
<                 result += 4;
<             }
<             if (value >> 2 > 0) {
<                 value >>= 2;
<                 result += 2;
<             }
<             if (value >> 1 > 0) {
<                 result += 1;
<             }
<         }
<         return result;
<     }
< 
<     /**
<      * @dev Return the log in base 2, following the selected rounding direction, of a positive value.
<      * Returns 0 if given 0.
<      */
<     function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {
<         unchecked {
<             uint256 result = log2(value);
<             return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);
<         }
<     }
< 
<     /**
<      * @dev Return the log in base 10, rounded down, of a positive value.
<      * Returns 0 if given 0.
<      */
<     function log10(uint256 value) internal pure returns (uint256) {
<         uint256 result = 0;
<         unchecked {
<             if (value >= 10 ** 64) {
<                 value /= 10 ** 64;
<                 result += 64;
<             }
<             if (value >= 10 ** 32) {
<                 value /= 10 ** 32;
<                 result += 32;
<             }
<             if (value >= 10 ** 16) {
<                 value /= 10 ** 16;
<                 result += 16;
<             }
<             if (value >= 10 ** 8) {
<                 value /= 10 ** 8;
<                 result += 8;
<             }
<             if (value >= 10 ** 4) {
<                 value /= 10 ** 4;
<                 result += 4;
<             }
<             if (value >= 10 ** 2) {
<                 value /= 10 ** 2;
<                 result += 2;
<             }
<             if (value >= 10 ** 1) {
<                 result += 1;
<             }
<         }
<         return result;
<     }
< 
<     /**
<      * @dev Return the log in base 10, following the selected rounding direction, of a positive value.
<      * Returns 0 if given 0.
<      */
<     function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {
<         unchecked {
<             uint256 result = log10(value);
<             return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);
<         }
<     }
< 
<     /**
<      * @dev Return the log in base 256, rounded down, of a positive value.
<      * Returns 0 if given 0.
<      *
<      * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.
<      */
<     function log256(uint256 value) internal pure returns (uint256) {
<         uint256 result = 0;
<         unchecked {
<             if (value >> 128 > 0) {
<                 value >>= 128;
<                 result += 16;
<             }
<             if (value >> 64 > 0) {
<                 value >>= 64;
<                 result += 8;
<             }
<             if (value >> 32 > 0) {
<                 value >>= 32;
<                 result += 4;
<             }
<             if (value >> 16 > 0) {
<                 value >>= 16;
<                 result += 2;
<             }
<             if (value >> 8 > 0) {
<                 result += 1;
<             }
<         }
<         return result;
<     }
< 
<     /**
<      * @dev Return the log in base 256, following the selected rounding direction, of a positive value.
<      * Returns 0 if given 0.
<      */
<     function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {
<         unchecked {
<             uint256 result = log256(value);
<             return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);
<         }
<     }
< }
< 
< // The following code is from flattening this import statement in: /home/andrey/valory/autonolas-governance/node_modules/@openzeppelin/contracts/utils/Strings.sol
< // import "./math/SignedMath.sol";
< // The following code is from flattening this file: /home/andrey/valory/autonolas-governance/node_modules/@openzeppelin/contracts/utils/math/SignedMath.sol
< // OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)
< 
< 
< /**
<  * @dev Standard signed math utilities missing in the Solidity language.
<  */
< library SignedMath {
<     /**
<      * @dev Returns the largest of two signed numbers.
<      */
<     function max(int256 a, int256 b) internal pure returns (int256) {
<         return a > b ? a : b;
<     }
< 
<     /**
<      * @dev Returns the smallest of two signed numbers.
<      */
<     function min(int256 a, int256 b) internal pure returns (int256) {
<         return a < b ? a : b;
<     }
< 
<     /**
<      * @dev Returns the average of two signed numbers without overflow.
<      * The result is rounded towards zero.
<      */
<     function average(int256 a, int256 b) internal pure returns (int256) {
<         // Formula from the book "Hacker's Delight"
<         int256 x = (a & b) + ((a ^ b) >> 1);
<         return x + (int256(uint256(x) >> 255) & (a ^ b));
<     }
< 
<     /**
<      * @dev Returns the absolute unsigned value of a signed value.
<      */
<     function abs(int256 n) internal pure returns (uint256) {
<         unchecked {
<             // must be unchecked in order to support `n = type(int256).min`
<             return uint256(n >= 0 ? n : -n);
<         }
<     }
< }
---
> // The following code is from flattening this file: /home/andrey/valory/audit-process/projects/autonolas-governance/node_modules/@openzeppelin/contracts/utils/Strings.sol
> // OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)
530c144
<     bytes16 private constant _SYMBOLS = "0123456789abcdef";
---
>     bytes16 private constant _HEX_SYMBOLS = "0123456789abcdef";
537,556c151,152
<         unchecked {
<             uint256 length = Math.log10(value) + 1;
<             string memory buffer = new string(length);
<             uint256 ptr;
<             /// @solidity memory-safe-assembly
<             assembly {
<                 ptr := add(buffer, add(32, length))
<             }
<             while (true) {
<                 ptr--;
<                 /// @solidity memory-safe-assembly
<                 assembly {
<                     mstore8(ptr, byte(mod(value, 10), _SYMBOLS))
<                 }
<                 value /= 10;
<                 if (value == 0) break;
<             }
<             return buffer;
<         }
<     }
---
>         // Inspired by OraclizeAPI's implementation - MIT licence
>         // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol
558,562c154,169
<     /**
<      * @dev Converts a `int256` to its ASCII `string` decimal representation.
<      */
<     function toString(int256 value) internal pure returns (string memory) {
<         return string(abi.encodePacked(value < 0 ? "-" : "", toString(SignedMath.abs(value))));
---
>         if (value == 0) {
>             return "0";
>         }
>         uint256 temp = value;
>         uint256 digits;
>         while (temp != 0) {
>             digits++;
>             temp /= 10;
>         }
>         bytes memory buffer = new bytes(digits);
>         while (value != 0) {
>             digits -= 1;
>             buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));
>             value /= 10;
>         }
>         return string(buffer);
569,570c176,177
<         unchecked {
<             return toHexString(value, Math.log256(value) + 1);
---
>         if (value == 0) {
>             return "0x00";
571a179,185
>         uint256 temp = value;
>         uint256 length = 0;
>         while (temp != 0) {
>             length++;
>             temp >>= 8;
>         }
>         return toHexString(value, length);
582c196
<             buffer[i] = _SYMBOLS[value & 0xf];
---
>             buffer[i] = _HEX_SYMBOLS[value & 0xf];
595,601d208
< 
<     /**
<      * @dev Returns true if the two strings are equal.
<      */
<     function equal(string memory a, string memory b) internal pure returns (bool) {
<         return keccak256(bytes(a)) == keccak256(bytes(b));
<     }
604c211
< // The following code is from flattening this import statement in: /home/andrey/valory/autonolas-governance/node_modules/@openzeppelin/contracts/access/AccessControl.sol
---
> // The following code is from flattening this import statement in: /home/andrey/valory/audit-process/projects/autonolas-governance/node_modules/@openzeppelin/contracts/access/AccessControl.sol
606c213
< // The following code is from flattening this file: /home/andrey/valory/autonolas-governance/node_modules/@openzeppelin/contracts/utils/introspection/ERC165.sol
---
> // The following code is from flattening this file: /home/andrey/valory/audit-process/projects/autonolas-governance/node_modules/@openzeppelin/contracts/utils/introspection/ERC165.sol
610c217
< // The following code is from flattening this import statement in: /home/andrey/valory/autonolas-governance/node_modules/@openzeppelin/contracts/utils/introspection/ERC165.sol
---
> // The following code is from flattening this import statement in: /home/andrey/valory/audit-process/projects/autonolas-governance/node_modules/@openzeppelin/contracts/utils/introspection/ERC165.sol
612c219
< // The following code is from flattening this file: /home/andrey/valory/autonolas-governance/node_modules/@openzeppelin/contracts/utils/introspection/IERC165.sol
---
> // The following code is from flattening this file: /home/andrey/valory/audit-process/projects/autonolas-governance/node_modules/@openzeppelin/contracts/utils/introspection/IERC165.sol
673c280
<  * ```solidity
---
>  * ```
680c287
<  * ```solidity
---
>  * ```
698,699c305
<  * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}
<  * to enforce additional security measures for this role.
---
>  * accounts that have been granted it.
765c371
<                         Strings.toHexString(account),
---
>                         Strings.toHexString(uint160(account), 20),
901c507
< // The following code is from flattening this import statement in: /home/andrey/valory/autonolas-governance/node_modules/@openzeppelin/contracts/governance/TimelockController.sol
---
> // The following code is from flattening this import statement in: /home/andrey/valory/audit-process/projects/autonolas-governance/node_modules/@openzeppelin/contracts/governance/TimelockController.sol
903c509
< // The following code is from flattening this file: /home/andrey/valory/autonolas-governance/node_modules/@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol
---
> // The following code is from flattening this file: /home/andrey/valory/audit-process/projects/autonolas-governance/node_modules/@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol
905a512
> 
929c536
< // The following code is from flattening this import statement in: /home/andrey/valory/autonolas-governance/node_modules/@openzeppelin/contracts/governance/TimelockController.sol
---
> // The following code is from flattening this import statement in: /home/andrey/valory/audit-process/projects/autonolas-governance/node_modules/@openzeppelin/contracts/governance/TimelockController.sol
931c538
< // The following code is from flattening this file: /home/andrey/valory/autonolas-governance/node_modules/@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol
---
> // The following code is from flattening this file: /home/andrey/valory/audit-process/projects/autonolas-governance/node_modules/@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol
934c541,542
< // Skipping this already resolved import statement found in /home/andrey/valory/autonolas-governance/node_modules/@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol 
---
> 
> // Skipping this already resolved import statement found in /home/andrey/valory/audit-process/projects/autonolas-governance/node_modules/@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol 
988a597,821
> // The following code is from flattening this import statement in: /home/andrey/valory/audit-process/projects/autonolas-governance/node_modules/@openzeppelin/contracts/governance/TimelockController.sol
> // import "../utils/Address.sol";
> // The following code is from flattening this file: /home/andrey/valory/audit-process/projects/autonolas-governance/node_modules/@openzeppelin/contracts/utils/Address.sol
> // OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)
> 
> pragma solidity ^0.8.1;
> 
> /**
>  * @dev Collection of functions related to the address type
>  */
> library Address {
>     /**
>      * @dev Returns true if `account` is a contract.
>      *
>      * [IMPORTANT]
>      * ====
>      * It is unsafe to assume that an address for which this function returns
>      * false is an externally-owned account (EOA) and not a contract.
>      *
>      * Among others, `isContract` will return false for the following
>      * types of addresses:
>      *
>      *  - an externally-owned account
>      *  - a contract in construction
>      *  - an address where a contract will be created
>      *  - an address where a contract lived, but was destroyed
>      * ====
>      *
>      * [IMPORTANT]
>      * ====
>      * You shouldn't rely on `isContract` to protect against flash loan attacks!
>      *
>      * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets
>      * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract
>      * constructor.
>      * ====
>      */
>     function isContract(address account) internal view returns (bool) {
>         // This method relies on extcodesize/address.code.length, which returns 0
>         // for contracts in construction, since the code is only stored at the end
>         // of the constructor execution.
> 
>         return account.code.length > 0;
>     }
> 
>     /**
>      * @dev Replacement for Solidity's `transfer`: sends `amount` wei to
>      * `recipient`, forwarding all available gas and reverting on errors.
>      *
>      * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost
>      * of certain opcodes, possibly making contracts go over the 2300 gas limit
>      * imposed by `transfer`, making them unable to receive funds via
>      * `transfer`. {sendValue} removes this limitation.
>      *
>      * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].
>      *
>      * IMPORTANT: because control is transferred to `recipient`, care must be
>      * taken to not create reentrancy vulnerabilities. Consider using
>      * {ReentrancyGuard} or the
>      * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].
>      */
>     function sendValue(address payable recipient, uint256 amount) internal {
>         require(address(this).balance >= amount, "Address: insufficient balance");
> 
>         (bool success, ) = recipient.call{value: amount}("");
>         require(success, "Address: unable to send value, recipient may have reverted");
>     }
> 
>     /**
>      * @dev Performs a Solidity function call using a low level `call`. A
>      * plain `call` is an unsafe replacement for a function call: use this
>      * function instead.
>      *
>      * If `target` reverts with a revert reason, it is bubbled up by this
>      * function (like regular Solidity function calls).
>      *
>      * Returns the raw returned data. To convert to the expected return value,
>      * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].
>      *
>      * Requirements:
>      *
>      * - `target` must be a contract.
>      * - calling `target` with `data` must not revert.
>      *
>      * _Available since v3.1._
>      */
>     function functionCall(address target, bytes memory data) internal returns (bytes memory) {
>         return functionCall(target, data, "Address: low-level call failed");
>     }
> 
>     /**
>      * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with
>      * `errorMessage` as a fallback revert reason when `target` reverts.
>      *
>      * _Available since v3.1._
>      */
>     function functionCall(
>         address target,
>         bytes memory data,
>         string memory errorMessage
>     ) internal returns (bytes memory) {
>         return functionCallWithValue(target, data, 0, errorMessage);
>     }
> 
>     /**
>      * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
>      * but also transferring `value` wei to `target`.
>      *
>      * Requirements:
>      *
>      * - the calling contract must have an ETH balance of at least `value`.
>      * - the called Solidity function must be `payable`.
>      *
>      * _Available since v3.1._
>      */
>     function functionCallWithValue(
>         address target,
>         bytes memory data,
>         uint256 value
>     ) internal returns (bytes memory) {
>         return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
>     }
> 
>     /**
>      * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but
>      * with `errorMessage` as a fallback revert reason when `target` reverts.
>      *
>      * _Available since v3.1._
>      */
>     function functionCallWithValue(
>         address target,
>         bytes memory data,
>         uint256 value,
>         string memory errorMessage
>     ) internal returns (bytes memory) {
>         require(address(this).balance >= value, "Address: insufficient balance for call");
>         require(isContract(target), "Address: call to non-contract");
> 
>         (bool success, bytes memory returndata) = target.call{value: value}(data);
>         return verifyCallResult(success, returndata, errorMessage);
>     }
> 
>     /**
>      * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
>      * but performing a static call.
>      *
>      * _Available since v3.3._
>      */
>     function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
>         return functionStaticCall(target, data, "Address: low-level static call failed");
>     }
> 
>     /**
>      * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],
>      * but performing a static call.
>      *
>      * _Available since v3.3._
>      */
>     function functionStaticCall(
>         address target,
>         bytes memory data,
>         string memory errorMessage
>     ) internal view returns (bytes memory) {
>         require(isContract(target), "Address: static call to non-contract");
> 
>         (bool success, bytes memory returndata) = target.staticcall(data);
>         return verifyCallResult(success, returndata, errorMessage);
>     }
> 
>     /**
>      * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
>      * but performing a delegate call.
>      *
>      * _Available since v3.4._
>      */
>     function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
>         return functionDelegateCall(target, data, "Address: low-level delegate call failed");
>     }
> 
>     /**
>      * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],
>      * but performing a delegate call.
>      *
>      * _Available since v3.4._
>      */
>     function functionDelegateCall(
>         address target,
>         bytes memory data,
>         string memory errorMessage
>     ) internal returns (bytes memory) {
>         require(isContract(target), "Address: delegate call to non-contract");
> 
>         (bool success, bytes memory returndata) = target.delegatecall(data);
>         return verifyCallResult(success, returndata, errorMessage);
>     }
> 
>     /**
>      * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the
>      * revert reason using the provided one.
>      *
>      * _Available since v4.3._
>      */
>     function verifyCallResult(
>         bool success,
>         bytes memory returndata,
>         string memory errorMessage
>     ) internal pure returns (bytes memory) {
>         if (success) {
>             return returndata;
>         } else {
>             // Look for revert reason and bubble it up if present
>             if (returndata.length > 0) {
>                 // The easiest way to bubble the revert reason is using memory via assembly
>                 /// @solidity memory-safe-assembly
>                 assembly {
>                     let returndata_size := mload(returndata)
>                     revert(add(32, returndata), returndata_size)
>                 }
>             } else {
>                 revert(errorMessage);
>             }
>         }
>     }
> }
> 
1034,1038d866
<      * @dev Emitted when new proposal is scheduled with non-zero salt.
<      */
<     event CallSalt(bytes32 indexed id, bytes32 salt);
< 
<     /**
1049,1061c877,892
<      * @dev Initializes the contract with the following parameters:
<      *
<      * - `minDelay`: initial minimum delay for operations
<      * - `proposers`: accounts to be granted proposer and canceller roles
<      * - `executors`: accounts to be granted executor role
<      * - `admin`: optional account to be granted admin role; disable with zero address
<      *
<      * IMPORTANT: The optional admin can aid with initial configuration of roles after deployment
<      * without being subject to delay, but this role should be subsequently renounced in favor of
<      * administration through timelocked proposals. Previous versions of this contract would assign
<      * this admin to the deployer automatically and should be renounced as well.
<      */
<     constructor(uint256 minDelay, address[] memory proposers, address[] memory executors, address admin) {
---
>      * @dev Initializes the contract with a given `minDelay`, and a list of
>      * initial proposers and executors. The proposers receive both the
>      * proposer and the canceller role (for backward compatibility). The
>      * executors receive the executor role.
>      *
>      * NOTE: At construction, both the deployer and the timelock itself are
>      * administrators. This helps further configuration of the timelock by the
>      * deployer. After configuration is done, it is recommended that the
>      * deployer renounces its admin position and relies on timelocked
>      * operations to perform future maintenance.
>      */
>     constructor(
>         uint256 minDelay,
>         address[] memory proposers,
>         address[] memory executors
>     ) {
1067c898,899
<         // self administration
---
>         // deployer + self administration
>         _setupRole(TIMELOCK_ADMIN_ROLE, _msgSender());
1070,1074d901
<         // optional admin
<         if (admin != address(0)) {
<             _setupRole(TIMELOCK_ADMIN_ROLE, admin);
<         }
< 
1119c946
<     function isOperation(bytes32 id) public view virtual returns (bool) {
---
>     function isOperation(bytes32 id) public view virtual returns (bool registered) {
1124c951
<      * @dev Returns whether an operation is pending or not. Note that a "pending" operation may also be "ready".
---
>      * @dev Returns whether an operation is pending or not.
1126c953
<     function isOperationPending(bytes32 id) public view virtual returns (bool) {
---
>     function isOperationPending(bytes32 id) public view virtual returns (bool pending) {
1131c958
<      * @dev Returns whether an operation is ready for execution. Note that a "ready" operation is also "pending".
---
>      * @dev Returns whether an operation is ready or not.
1133c960
<     function isOperationReady(bytes32 id) public view virtual returns (bool) {
---
>     function isOperationReady(bytes32 id) public view virtual returns (bool ready) {
1141c968
<     function isOperationDone(bytes32 id) public view virtual returns (bool) {
---
>     function isOperationDone(bytes32 id) public view virtual returns (bool done) {
1146c973
<      * @dev Returns the timestamp at which an operation becomes ready (0 for
---
>      * @dev Returns the timestamp at with an operation becomes ready (0 for
1149c976
<     function getTimestamp(bytes32 id) public view virtual returns (uint256) {
---
>     function getTimestamp(bytes32 id) public view virtual returns (uint256 timestamp) {
1158c985
<     function getMinDelay() public view virtual returns (uint256) {
---
>     function getMinDelay() public view virtual returns (uint256 duration) {
1172c999
<     ) public pure virtual returns (bytes32) {
---
>     ) public pure virtual returns (bytes32 hash) {
1186c1013
<     ) public pure virtual returns (bytes32) {
---
>     ) public pure virtual returns (bytes32 hash) {
1193c1020
<      * Emits {CallSalt} if salt is nonzero, and {CallScheduled}.
---
>      * Emits a {CallScheduled} event.
1210,1212d1036
<         if (salt != bytes32(0)) {
<             emit CallSalt(id, salt);
<         }
1218c1042
<      * Emits {CallSalt} if salt is nonzero, and one {CallScheduled} event per transaction in the batch.
---
>      * Emits one {CallScheduled} event per transaction in the batch.
1240,1242d1063
<         if (salt != bytes32(0)) {
<             emit CallSalt(id, salt);
<         }
1246c1067
<      * @dev Schedule an operation that is to become valid after a given delay.
---
>      * @dev Schedule an operation that is to becomes valid after a given delay.
1304,1306d1124
<     // This function can reenter, but it doesn't pose a risk because _afterCall checks that the proposal is pending,
<     // thus any modifications to the operation during reentrancy should be caught.
<     // slither-disable-next-line reentrancy-eth
1333c1151,1155
<     function _execute(address target, uint256 value, bytes calldata data) internal virtual {
---
>     function _execute(
>         address target,
>         uint256 value,
>         bytes calldata data
>     ) internal virtual {
1373c1195,1200
<     function onERC721Received(address, address, uint256, bytes memory) public virtual override returns (bytes4) {
---
>     function onERC721Received(
>         address,
>         address,
>         uint256,
>         bytes memory
>     ) public virtual override returns (bytes4) {
1407c1234
< /// @dev The OpenZeppelin functions are used as is, bumped to the last OZ version (4.9.1) to date.
---
> /// @dev The OpenZeppelin functions are used as is, using the last OZ version (4.6) on the date of deployment.
1410c1237
<         TimelockController(minDelay, proposers, executors, msg.sender)
---
>         TimelockController(minDelay, proposers, executors)
